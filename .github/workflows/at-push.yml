on: push
name: Script Test On Push
jobs:
  badtest:
    runs-on: ubuntu-latest
    steps:
    - run: exit 1
  test:
    runs-on: ubuntu-latest
    steps:
    - run: whoami
    - run: echo "refname ${{ github.ref_name }}"
    - run: echo "${{ toJSON( github ) }}"
      name: Dump github
    - uses: actions/checkout@master
    - uses: actions/github-script@v6
      name: dump
      with:
        script: |
          console.dir( context, { depth: null } )
          console.dir( github, { depth: null } )
    - uses: actions/github-script@v6
      id: create_checks
      with:
        result-encoding: string
        script: |
          const repo = context.payload.repository
          const res = await github.rest.checks.create({
            owner: repo.owner.login,
            repo: repo.name,
            head_sha: context.sha,
            name: 'Choooissu',
            status: 'in_progress'
          })
          console.dir(res)
          return res.data.id
    - uses: ./helloworld
      with:
        who-to-greet: |
          Akira
          Tetsuo
          Yamagata
    - uses: actions/github-script@v6
      env:
        CHECK_ID: ${{steps.create_checks.outputs.result}}
      with:
        script: |
          const repo = context.payload.repository
          const { CHECK_ID } = process.env
          const payload = {
            owner: repo.owner.login,
            repo: repo.name,
            check_run_id: CHECK_ID,
            //head_sha: context.sha,
            name: 'Choooissu',
            title: 'titliii',
            status: 'completed',
            conclusion: 'success',
            output: {
              title: 'ok ok title da',
              summary: 'OKdesu',
              text: 'okdesu'
            }
          }
          console.dir(payload)
          const res = await github.rest.checks.update(payload)
          console.dir(res)
    - run: exit 1
      name: Always fail
    - run: echo hello
    - if: always()
      run: |
        echo "::set-output name=message::Test A ${{ (job.status == 'success' && '✅') || '❌' }}"
        echo "# Summary for Test ${{ matrix.batch }}" >> $GITHUB_STEP_SUMMARY
        echo "- Test ${{ matrix.batch }}" >> $GITHUB_STEP_SUMMARY
  final:
    name: final
    needs: [ test, badtest ]
    if: always()
    steps:
      run: echo ${{ toJSON(needs) }}

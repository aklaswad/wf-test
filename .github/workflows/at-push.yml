on: push
name: Script Test On Push
jobs:
  badtest:
    runs-on: ubuntu-latest
    steps:
    - name: Get minimum set of changed file list
      env:
        token: ${{ secrets.ACTIONS_TOKEN }}
      run: |
        cred=$(echo 'x-access-token:${{ secrets.GITHUB_TOKEN }}' | base64)
        #cred=$(echo '${{ secrets.GITHUB_TOKEN }}' | base64)
        configvalue="AUTHORIZATION: basic ${cred}"
        echo "cred $cred"
        git config --global http.https://github.com/.extraheader "$configvalue"
        git config --global url.https://github.com/.insteadOf 'git@github.com:'
        tmpdir=$(mktemp -d)
        # I love gh! this also set up git credentials.
        #echo "$token" | gh auth login --with-token
        git clone --bare --filter=blob:none --no-recurse-submodules https://github.com/${{ github.repository }}.git "${tmpdir}"
        cd "${tmpdir}"
        default='${{ github.event.repository.default_branch }}'
        head='${{ github.event.after }}'
        first="$(git rev-parse ${head}^)"
        # If this commit is merge and it was from default branch,
        # this will get the name of default branch
        second="$(git name-rev ${head}^2)" || :
        echo "head hat 2 = [$second]"
        if [ -n "${second}" ]; then
          if [ "${second}" = "${default}" ] || [ "${second}" = 'remotes/origin/HEAD' ]; then
            # XXX: Find better way to know if this merge commit has
            #      conflict...
            if echo '${{ github.event.head_commit.message }}' | grep -i 'conflict' >/dev/null 2>&1; then
              :
            else
              echo "It seems we can ignore changes at default branch"
              head="${first}"
            fi
          fi
        fi
        from='${{ github.event.before }}'
        lastCheck=$(gh api repos/${{ github.repository }}/commits/${{ github.event.before }}/check-runs -q '.total_count as $t | .check_runs | map(select(.status != "completed" or (.conclusion != "success" and .conclusion != "skipped"))) | {fail: length, jobs: $t}')
        echo "Checks Result: ${lastCheck}"
        fail=$( echo "$lastCheck" | jq '.fail' )
        jobs=$( echo "$lastCheck" | jq '.jobs')
        if [ "$fail" -gt 0 ] || [ "$jobs" = "0" ]; then
          from=$(git merge-base "${head}" "${default}")
        fi
        echo "Get diff from: $from to: $head"
        echo 'CHANGED_FILES<<__FILENAMES__' >> $GITHUB_ENV
        git diff --name-only "${from}" "${head}" >> $GITHUB_ENV
        echo '__FILENAMES__' >> $GITHUB_ENV
        cd ../
        rm -rf "${tmpdir}"
    - env:
        val: ${{ env.CHANGED_FILES }}
      run: echo "$val"
  test:
    runs-on: ubuntu-latest
    steps:
    - run: whoami
    - run: echo "refname ${{ github.ref_name }}"
    - run: echo "${{ toJSON( github ) }}"
      name: Dump github
    - uses: actions/checkout@master
    - uses: actions/github-script@v6
      name: dump
      with:
        script: |
          console.dir( context, { depth: null } )
          console.dir( github, { depth: null } )
    - uses: actions/github-script@v6
      id: create_checks
      with:
        result-encoding: string
        script: |
          const repo = context.payload.repository
          const res = await github.rest.checks.create({
            owner: repo.owner.login,
            repo: repo.name,
            head_sha: context.sha,
            name: 'Choooissu',
            status: 'in_progress'
          })
          console.dir(res)
          return res.data.id
    - uses: ./helloworld
      with:
        who-to-greet: |
          Akira
          Tetsuo
          Yamagata
    - uses: actions/github-script@v6
      env:
        CHECK_ID: ${{steps.create_checks.outputs.result}}
      with:
        script: |
          const repo = context.payload.repository
          const { CHECK_ID } = process.env
          const payload = {
            owner: repo.owner.login,
            repo: repo.name,
            check_run_id: CHECK_ID,
            //head_sha: context.sha,
            name: 'Choooissu',
            title: 'titliii',
            status: 'completed',
            conclusion: 'success',
            output: {
              title: 'ok ok title da',
              summary: 'OKdesu',
              text: 'okdesu'
            }
          }
          console.dir(payload)
          const res = await github.rest.checks.update(payload)
          console.dir(res)
    - run: exit 1
      name: Always fail
    - run: echo hello
    - if: always()
      run: |
        echo "::set-output name=message::Test A ${{ (job.status == 'success' && '✅') || '❌' }}"
        echo "# Summary for Test ${{ matrix.batch }}" >> $GITHUB_STEP_SUMMARY
        echo "- Test ${{ matrix.batch }}" >> $GITHUB_STEP_SUMMARY
  final:
    runs-on: ubuntu-latest
    name: final
    needs: [ test, badtest ]
    if: always()
    steps:
    - run: echo '${{ toJSON(needs) }}'
    - uses: actions/github-script@v6
      with:
        script: |
          const res = await github.rest.actions.listJobsForWorkflowRun({
            owner: 'aklaswad',
            repo: 'wf-test',
            run_id: context.runid
          })
          console.dir(res, {depth: null})

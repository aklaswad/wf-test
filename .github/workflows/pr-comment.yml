on: issue_comment
name: comment test
jobs:
  parseOn:
    name: Comment Parser
    runs-on: ubuntu-latest
    outputs:
      action: ${{ env.action }}
    env:
      body: ${{ github.event.comment.body }}
    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            console.dir( context, { depth: null })

      - if: startsWith( env.body, '!deploy')
        run: echo "action=deploy" >> $GITHUB_ENV

      - if: startsWith( env.body, '!test')
        run: echo "action=test" >> $GITHUB_ENV

      - run: echo "No action"
        if: ${{ '' == env.action }}

      - run: echo "Action is " $the_action
        if: ${{ '' != env.action }}
        env:
          the_action: ${{ env.action }}
  deploy:
    needs: parseOn
    runs-on: ubuntu-latest
    if: needs.parseOn.outputs.action == 'deploy'
    steps:
      - run: echo "deploy!"
  test:
    needs: parseOn
    runs-on: ubuntu-latest
    if: needs.parseOn.outputs.action == 'test'
    steps:
      - run: echo "test..."
  parse:
    runs-on: ubuntu-latest
    outputs:
      deploy: ${{ ! fromJSON( steps.parse.outputs.result ).ignore }}
      command: ${{ fromJSON( steps.parse.outputs.result ).command }}
      selector: ${{ fromJSON( steps.parse.outputs.result ).selector }}
      token: ${{ fromJSON( steps.parse.outputs.result ).token }}
      runner: ${{ fromJSON( steps.parse.outputs.result ).runner }}
    steps:
      - uses: actions/github-script@v6
        id: parse
        name: Parse command from issue comment
        with:
          script: |
            const comment = context.payload.comment.body
            if ( ! /^!/.test(comment) ) {
              // It's not command.
              return { ignore: true, runner: 'ubuntu-latest' }
            }
            const [ command, token ] = comment.substr(1).split(':')
            if ( command === 'alt-deploy-to-staging' ) {
              return {
                selector: 'deploy-staging',
                command: 'cd $GITHUB_WORKSPACE && pwd && echo I am $GITHUB_WORKSPACE deploy-staging',
                token: token,
                runner: 'ubuntu-latest'
              }
            }
            return {
              selector: 'deploy-legacy',
              command: 'cd $GITHUB_WORKSPACE && pwd && echo I am $GITHUB_WORKSPACE deploy-leg',
              token: token,
              runner: 'ubuntu-latest',
            }
  deploy-staging:
    runs-on: ${{ needs.parse.outputs.runner }}
    needs: parse
    if: needs.parse.outputs.deploy
    steps:
      - run: ${{ needs.parse.outputs.command }}
  deploy-legacy:
    runs-on: ${{ needs.parse.outputs.runner }}
    needs: parse
    if: needs.parse.outputs.deploy
    steps:
      - run: ${{ needs.parse.outputs.command }}
  dump:
    runs-on: ubuntu-latest
    needs: parse
    steps:
      - run: echo ${{needs.parse.outputs.command}}  ${{needs.parse.outputs.token}} got

